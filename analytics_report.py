#!/usr/bin/env python3
"""
Analytics Report Generator for YouTube Summarizer Bot
Generates reports and charts from user activity logs
"""

import sys
import argparse
from pathlib import Path
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import pandas as pd
import seaborn as sns
from typing import List, Dict

# Add src directory to Python path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from analytics.logger import UserActivityLogger


class AnalyticsReporter:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self, db_path: str = "data/analytics.db"):
        self.logger = UserActivityLogger(db_path)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.style.use('seaborn-v0_8' if 'seaborn-v0_8' in plt.style.available else 'default')
        sns.set_palette("husl")
        plt.rcParams['figure.figsize'] = (12, 8)
        plt.rcParams['font.size'] = 10
    
    def generate_command_stats_chart(self, days: int = 30, save_path: str = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        stats = self.logger.get_command_stats(days)
        
        if not stats:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ–º–∞–Ω–¥")
            return
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        commands = [stat.command for stat in stats]
        uses = [stat.total_uses for stat in stats]
        users = [stat.unique_users for stat in stats]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # –ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        ax1.bar(commands, uses, color='skyblue', alpha=0.7)
        ax1.set_title(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∑–∞ {days} –¥–Ω–µ–π')
        ax1.set_xlabel('–ö–æ–º–∞–Ω–¥—ã')
        ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π')
        ax1.tick_params(axis='x', rotation=45)
        
        # –ì—Ä–∞—Ñ–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        ax2.bar(commands, users, color='lightcoral', alpha=0.7)
        ax2.set_title(f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∑–∞ {days} –¥–Ω–µ–π')
        ax2.set_xlabel('–ö–æ–º–∞–Ω–¥—ã')
        ax2.set_ylabel('–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
        ax2.tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        plt.show()
    
    def generate_daily_activity_chart(self, days: int = 30, save_path: str = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        daily_stats = self.logger.get_daily_activity(days)
        
        if not daily_stats:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            return
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        dates = [datetime.fromisoformat(stat['date']) for stat in daily_stats]
        activities = [stat['total_activities'] for stat in daily_stats]
        users = [stat['unique_users'] for stat in daily_stats]
        summarize_requests = [stat['summarize_requests'] for stat in daily_stats]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
        
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        ax1.plot(dates, activities, marker='o', linewidth=2, label='–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
        ax1.plot(dates, users, marker='s', linewidth=2, label='–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
        ax1.plot(dates, summarize_requests, marker='^', linewidth=2, label='–ó–∞–ø—Ä–æ—Å—ã –æ–±–æ–±—â–µ–Ω–∏—è')
        ax1.set_title(f'–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ {days} –¥–Ω–µ–π')
        ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
        ax1.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d'))
        ax1.xaxis.set_major_locator(mdates.DayLocator(interval=max(1, days//10)))
        
        # –ì—Ä–∞—Ñ–∏–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if activities:
            usage_rate = [req/act*100 if act > 0 else 0 for req, act in zip(summarize_requests, activities)]
            ax2.bar(dates, usage_rate, alpha=0.7, color='orange')
            ax2.set_title('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (%)')
            ax2.set_xlabel('–î–∞—Ç–∞')
            ax2.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±–æ–±—â–µ–Ω–∏—è')
            ax2.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d'))
            ax2.xaxis.set_major_locator(mdates.DayLocator(interval=max(1, days//10)))
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        plt.show()
    
    def generate_user_activity_chart(self, days: int = 30, top_users: int = 10, save_path: str = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = self.logger.get_active_users(days)
        
        if not users:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users_data = users[:top_users]
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user_labels = []
        activities = []
        commands_used = []
        
        for user in top_users_data:
            username = user['username'] or f"user_{user['user_id']}"
            if user['first_name']:
                username = f"{user['first_name']} (@{username})" if user['username'] else user['first_name']
            user_labels.append(username)
            activities.append(user['activity_count'])
            commands_used.append(user['commands_used'])
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
        
        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        bars1 = ax1.barh(user_labels, activities, color='lightgreen', alpha=0.7)
        ax1.set_title(f'–¢–æ–ø {top_users} —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {days} –¥–Ω–µ–π')
        ax1.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
        for i, bar in enumerate(bars1):
            width = bar.get_width()
            ax1.text(width + max(activities)*0.01, bar.get_y() + bar.get_height()/2, 
                    f'{int(width)}', ha='left', va='center')
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∫–æ–º–∞–Ω–¥
        bars2 = ax2.barh(user_labels, commands_used, color='lightblue', alpha=0.7)
        ax2.set_title(f'–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥')
        ax2.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
        for i, bar in enumerate(bars2):
            width = bar.get_width()
            ax2.text(width + max(commands_used)*0.01, bar.get_y() + bar.get_height()/2, 
                    f'{int(width)}', ha='left', va='center')
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        plt.show()
    
    def generate_video_popularity_chart(self, days: int = 30, top_videos: int = 15, save_path: str = None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
        videos = self.logger.get_popular_videos(days)
        
        if not videos:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ")
            return
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø –≤–∏–¥–µ–æ
        top_videos_data = videos[:top_videos]
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        video_titles = []
        processing_counts = []
        unique_users = []
        
        for video in top_videos_data:
            # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            title = video['title'][:50] + '...' if len(video['title']) > 50 else video['title']
            video_titles.append(title)
            processing_counts.append(video['processing_count'])
            unique_users.append(video['unique_users'])
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        bars = ax.barh(video_titles, processing_counts, color='gold', alpha=0.7)
        ax.set_title(f'–¢–æ–ø {top_videos} —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ –∑–∞ {days} –¥–Ω–µ–π')
        ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
        for i, bar in enumerate(bars):
            width = bar.get_width()
            ax.text(width + max(processing_counts)*0.01, bar.get_y() + bar.get_height()/2, 
                    f'{int(width)} ({unique_users[i]} –ø–æ–ª—å–∑.)', ha='left', va='center', fontsize=8)
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        plt.show()
    
    def print_summary_report(self, days: int = 30):
        """–ü–µ—á–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print(f"\n{'='*60}")
        print(f"–û–¢–ß–ï–¢ –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò –ë–û–¢–ê –ó–ê {days} –î–ù–ï–ô")
        print(f"{'='*60}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ú–ê–ù–î:")
        print("-" * 40)
        command_stats = self.logger.get_command_stats(days)
        
        if command_stats:
            total_commands = sum(stat.total_uses for stat in command_stats)
            total_unique_users = len(set(self.logger.get_active_users(days)))
            
            print(f"–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_commands}")
            print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_unique_users}")
            print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–º–∞–Ω–¥ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {total_commands/total_unique_users:.1f}")
            print()
            
            for stat in command_stats:
                print(f"/{stat.command:<15} - {stat.total_uses:>3} –∏—Å–ø. | {stat.unique_users:>2} –ø–æ–ª—å–∑. | "
                      f"{stat.success_rate*100:>5.1f}% —É—Å–ø–µ—Ö")
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        print(f"\nüë• –¢–û–ü-5 –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        print("-" * 40)
        active_users = self.logger.get_active_users(days)
        
        for i, user in enumerate(active_users[:5], 1):
            username = user['username'] or f"user_{user['user_id']}"
            name = user['first_name'] or username
            print(f"{i}. {name:<20} - {user['activity_count']:>3} –¥–µ–π—Å—Ç–≤–∏–π | "
                  f"{user['commands_used']} –∫–æ–º–∞–Ω–¥")
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ
        print(f"\nüé• –¢–û–ü-5 –ü–û–ü–£–õ–Ø–†–ù–´–• –í–ò–î–ï–û:")
        print("-" * 40)
        popular_videos = self.logger.get_popular_videos(days)
        
        for i, video in enumerate(popular_videos[:5], 1):
            title = video['title'][:40] + '...' if len(video['title']) > 40 else video['title']
            print(f"{i}. {title:<43} - {video['processing_count']} –æ–±—Ä.")
        
        print(f"\n{'='*60}")


def main():
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è YouTube Summarizer Bot')
    parser.add_argument('--days', type=int, default=30, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)')
    parser.add_argument('--db-path', type=str, default='data/analytics.db', help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--save-charts', type=str, help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)')
    parser.add_argument('--report-only', action='store_true', help='–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç, –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not Path(args.db_path).exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.db_path}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –ª–æ–≥–∏.")
        sys.exit(1)
    
    reporter = AnalyticsReporter(args.db_path)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    reporter.print_summary_report(args.days)
    
    if not args.report_only:
        print(f"\nüìà –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_commands = f"{args.save_charts}_commands.png" if args.save_charts else None
        save_daily = f"{args.save_charts}_daily.png" if args.save_charts else None
        save_users = f"{args.save_charts}_users.png" if args.save_charts else None
        save_videos = f"{args.save_charts}_videos.png" if args.save_charts else None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        try:
            reporter.generate_command_stats_chart(args.days, save_commands)
            reporter.generate_daily_activity_chart(args.days, save_daily)
            reporter.generate_user_activity_chart(args.days, save_path=save_users)
            reporter.generate_video_popularity_chart(args.days, save_path=save_videos)
            
            if args.save_charts:
                print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: {args.save_charts}")
        
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pip install matplotlib seaborn pandas")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")


if __name__ == "__main__":
    main() 