#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
"""

import asyncio
import sys
from pathlib import Path
import redis.asyncio as redis
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent / "src"))

from config.settings import get_settings

async def check_whitelist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")
    print("=" * 50)
    
    settings = get_settings()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
        redis_client = redis.Redis(
            host=settings.redis_host,
            port=settings.redis_port,
            db=settings.redis_db,
            password=settings.redis_password,
            decode_responses=True
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
        whitelist_keys = await redis_client.keys("subscription_whitelist:*")
        
        if not whitelist_keys:
            print("üì≠ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            return
        
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ: {len(whitelist_keys)}")
        print("\nüìù –î–µ—Ç–∞–ª–∏:")
        
        for key in whitelist_keys:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–ª—é—á–∞
            user_id = key.split(":")[-1]
            
            # –ü–æ–ª—É—á–∞–µ–º TTL (–≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)
            ttl = await redis_client.ttl(key)
            
            if ttl == -1:
                time_left = "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"
            elif ttl == -2:
                time_left = "–ò—Å—Ç–µ–∫"
            else:
                hours = ttl // 3600
                minutes = (ttl % 3600) // 60
                time_left = f"{hours}—á {minutes}–º"
            
            print(f"  üÜî User ID: {user_id}")
            print(f"     ‚è∞ –í—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {time_left}")
            print(f"     üîë Redis key: {key}")
            print()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        cache_keys = await redis_client.keys(f"subscription_status:{settings.required_channel_username}:*")
        print(f"  üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤: {len(cache_keys)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"  üì∫ –ö–∞–Ω–∞–ª: @{settings.required_channel_username}")
        print(f"  üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞: {settings.subscription_check_enabled}")
        print(f"  ‚è±Ô∏è TTL –∫—ç—à–∞: {settings.subscription_cache_ttl} —Å–µ–∫")
        
        await redis_client.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

async def clear_whitelist():
    """–û—á–∏—â–∞–µ—Ç –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)."""
    print("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞...")
    
    settings = get_settings()
    
    try:
        redis_client = redis.Redis(
            host=settings.redis_host,
            port=settings.redis_port,
            db=settings.redis_db,
            password=settings.redis_password,
            decode_responses=True
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
        whitelist_keys = await redis_client.keys("subscription_whitelist:*")
        cache_keys = await redis_client.keys(f"subscription_status:{settings.required_channel_username}:*")
        
        all_keys = whitelist_keys + cache_keys
        
        if all_keys:
            await redis_client.delete(*all_keys)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(all_keys)} –∑–∞–ø–∏—Å–µ–π")
        else:
            print("üì≠ –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å")
            
        await redis_client.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

async def add_test_user(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫."""
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫...")
    
    settings = get_settings()
    
    try:
        redis_client = redis.Redis(
            host=settings.redis_host,
            port=settings.redis_port,
            db=settings.redis_db,
            password=settings.redis_password,
            decode_responses=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ 24 —á–∞—Å–∞
        key = f"subscription_whitelist:{user_id}"
        await redis_client.setex(key, 86400, "1")
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ 24 —á–∞—Å–∞")
        
        await redis_client.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")

if __name__ == "__main__":
    print("üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv()
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "clear":
            asyncio.run(clear_whitelist())
        elif command == "add" and len(sys.argv) > 2:
            user_id = int(sys.argv[2])
            asyncio.run(add_test_user(user_id))
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python check_whitelist.py           # –ü–æ–∫–∞–∑–∞—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
            print("  python check_whitelist.py clear     # –û—á–∏—Å—Ç–∏—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
            print("  python check_whitelist.py add USER_ID  # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        asyncio.run(check_whitelist()) 