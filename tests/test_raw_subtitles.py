"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –±–µ–∑ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import pytest
import asyncio
from unittest.mock import Mock, patch, AsyncMock
from src.youtube.processor import YouTubeProcessor
from src.utils.subtitle_formatter import SubtitleFormatter
from src.bot.handlers import BotHandlers


class TestRawSubtitles:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
    
    @pytest.fixture
    def sample_subtitle_data(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        return {
            "video_id": "dQw4w9WgXcQ",
            "title": "Test Video Title",
            "duration": 212,
            "channel": "Test Channel",
            "subtitles": [
                {"start": 0.0, "duration": 3.0, "text": "Hello world"},
                {"start": 3.0, "duration": 2.0, "text": "This is a test"},
                {"start": 5.0, "duration": 4.0, "text": "Testing subtitles"}
            ],
            "language": "English",
            "language_code": "en",
            "auto_generated": False,
            "subtitle_count": 3
        }
    
    @pytest.mark.asyncio
    async def test_extract_raw_subtitles_success(self, sample_subtitle_data):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        processor = YouTubeProcessor()
        
        with patch('src.youtube.processor.YouTubeTranscriptApi') as mock_api, \
             patch.object(processor, 'get_video_info') as mock_get_info, \
             patch('src.youtube.processor.extract_video_id') as mock_extract_id:
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è extract_video_id
            mock_extract_id.return_value = "dQw4w9WgXcQ"
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è get_video_info
            mock_get_info.return_value = {
                "title": "Test Video Title",
                "duration": 212,
                "uploader": "Test Channel"
            }
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è transcript API
            mock_transcript = Mock()
            mock_transcript.fetch.return_value = sample_subtitle_data["subtitles"]
            mock_transcript.language = "English"
            mock_transcript.language_code = "en"
            
            mock_transcript_list = Mock()
            mock_transcript_list.find_manually_created_transcript.return_value = mock_transcript
            mock_api.list_transcripts.return_value = mock_transcript_list
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º
            result = await processor.extract_raw_subtitles("https://www.youtube.com/watch?v=dQw4w9WgXcQ")
            
            assert result["video_id"] == "dQw4w9WgXcQ"
            assert len(result["subtitles"]) == 3
            assert result["language"] == "English"
            assert result["auto_generated"] == False
    
    def test_subtitle_formatter_plain_text(self, sample_subtitle_data):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"""
        formatter = SubtitleFormatter()
        result = formatter.format_for_file(sample_subtitle_data)
        
        assert isinstance(result, str)
        assert "Test Video Title" in result
        assert "Hello world" in result
        assert "Test Channel" in result
    
    def test_subtitle_formatter_message_splitting(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"""
        formatter = SubtitleFormatter()
        
        # –°–æ–∑–¥–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã
        long_subtitles = {
            "video_id": "test",
            "title": "Long Video",
            "duration": 3600,
            "channel": "Test Channel",
            "subtitles": [
                {"start": i, "duration": 1.0, "text": f"Very long subtitle text segment number {i} " * 20}
                for i in range(50)
            ],
            "language": "English",
            "language_code": "en",
            "auto_generated": False,
            "subtitle_count": 50
        }
        
        result = formatter.format_for_file(long_subtitles)
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        assert isinstance(result, str)
        assert len(result) > 1000  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º
        assert "Long Video" in result
    
    @pytest.mark.asyncio
    async def test_raw_subtitles_command_no_url(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ URL"""
        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
        update = Mock()
        context = Mock()
        queue_manager = Mock()
        youtube_processor = Mock()
        
        handlers = BotHandlers(queue_manager, youtube_processor)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)  
        update.effective_user.id = 123456  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID
        update.message.text = "/raw_subtitles"
        update.message.reply_text = AsyncMock()
        context.args = []
        
        # –ú–æ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        with patch('src.bot.handlers.settings') as mock_settings:
            mock_settings.allowed_users_list = None  # –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            
            await handlers.raw_subtitles_command(update, context)
            
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            update.message.reply_text.assert_called_once()
            call_args = update.message.reply_text.call_args[0]
            assert "usage" in call_args[0].lower() or "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ" in call_args[0].lower()
    
    def test_subtitle_formatter_header_creation(self, sample_subtitle_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        formatter = SubtitleFormatter()
        header = formatter._create_header(sample_subtitle_data)
        
        assert "Test Video Title" in header
        assert "Test Channel" in header
        assert "üë§ –†—É—á–Ω—ã–µ" in header  # –î–ª—è —Ä—É—á–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        assert "–°–µ–≥–º–µ–Ω—Ç–æ–≤: 3" in header
    
    def test_subtitle_formatter_auto_generated_header(self):
        """–¢–µ—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        formatter = SubtitleFormatter()
        auto_data = {
            "video_id": "test",
            "title": "Auto Video",
            "duration": 120,
            "channel": "Auto Channel",
            "subtitles": [],
            "language": "Russian",
            "language_code": "ru",
            "auto_generated": True,
            "subtitle_count": 0
        }
        
        header = formatter._create_header(auto_data)
        assert "ü§ñ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ" in header
    
    def test_format_duration(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        formatter = SubtitleFormatter()
        
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        assert "0:03:32" in formatter._format_duration(212)  # 3 –º–∏–Ω—É—Ç—ã 32 —Å–µ–∫—É–Ω–¥—ã
        assert "1:00:00" in formatter._format_duration(3600)  # 1 —á–∞—Å
    
    def test_format_seconds_to_timestamp(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ–∫—É–Ω–¥ –≤ timestamp"""
        formatter = SubtitleFormatter()
        
        assert formatter._seconds_to_timestamp(0) == "00:00"
        assert formatter._seconds_to_timestamp(90) == "01:30"
        assert formatter._seconds_to_timestamp(3661) == "61:01"  # –ë–æ–ª–µ–µ —á–∞—Å–∞
    
    def test_subtitle_formatter_file_content(self, sample_subtitle_data):
        """–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        formatter = SubtitleFormatter()
        result = formatter.format_for_file(sample_subtitle_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
        lines = result.split('\n')
        
        # –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        assert any("Test Video Title" in line for line in lines)
        assert any("Test Channel" in line for line in lines)
        assert any("üë§ –†—É—á–Ω—ã–µ" in line for line in lines)
        assert any("–°–µ–≥–º–µ–Ω—Ç–æ–≤: 3" in line for line in lines)
        
        # –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        assert "Hello world" in result
        assert "This is a test" in result
        assert "Testing subtitles" in result


if __name__ == "__main__":
    pytest.main([__file__]) 