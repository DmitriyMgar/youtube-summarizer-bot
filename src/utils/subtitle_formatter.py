"""
Subtitle Formatter for YouTube Video Summarizer Bot
Formats subtitles for Telegram delivery
"""

from typing import List, Dict, Any
import textwrap
from datetime import timedelta


class SubtitleFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    
    MAX_MESSAGE_LENGTH = 4000  # –õ–∏–º–∏—Ç Telegram —Å –∑–∞–ø–∞—Å–æ–º
    
    def __init__(self):
        self.current_format = "plain"  # plain, timestamps, structured
    
    def format_for_telegram(self, subtitle_data: Dict[str, Any]) -> List[str]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è Telegram
        
        Args:
            subtitle_data: –î–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–∑ extract_raw_subtitles
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        header = self._create_header(subtitle_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        formatted_text = self._format_subtitle_text(subtitle_data["subtitles"])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç
        full_text = f"{header}\n{formatted_text}"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        return self._split_into_messages(full_text, header)
    
    def _create_header(self, data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        duration_str = self._format_duration(data["duration"])
        auto_gen_str = "ü§ñ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ" if data["auto_generated"] else "üë§ –†—É—á–Ω—ã–µ"
        
        header = (
            f"üì∫ **{data['title']}**\n"
            f"üì∫ {data['channel']}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
            f"üó£ –Ø–∑—ã–∫: {data['language']} ({data['language_code']})\n"
            f"üìù –¢–∏–ø: {auto_gen_str}\n"
            f"üìä –°–µ–≥–º–µ–Ω—Ç–æ–≤: {data['subtitle_count']}\n"
            f"{'‚îÄ' * 30}"
        )
        
        return header
    
    def _format_subtitle_text(self, subtitles: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        if self.current_format == "timestamps":
            return self._format_with_timestamps(subtitles)
        else:
            return self._format_plain_text(subtitles)
    
    def _format_plain_text(self, subtitles: List[Dict]) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫"""
        text_parts = []
        current_paragraph = []
        
        for subtitle in subtitles:
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç–æ–≤ FetchedTranscriptSnippet
            if hasattr(subtitle, 'text'):
                text = subtitle.text.strip()
            else:
                text = subtitle.get("text", "").strip()
                
            if not text:
                continue
                
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã –≤ –∞–±–∑–∞—Ü—ã
            current_paragraph.append(text)
            
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
            if text.endswith(('.', '!', '?')) or len(current_paragraph) >= 3:
                text_parts.append(' '.join(current_paragraph))
                current_paragraph = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        if current_paragraph:
            text_parts.append(' '.join(current_paragraph))
        
        return '\n\n'.join(text_parts)
    
    def _format_with_timestamps(self, subtitles: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        formatted_lines = []
        
        for subtitle in subtitles:
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç–æ–≤ FetchedTranscriptSnippet
            if hasattr(subtitle, 'start'):
                start_time = self._seconds_to_timestamp(subtitle.start)
                text = subtitle.text.strip()
            else:
                start_time = self._seconds_to_timestamp(subtitle.get("start", 0))
                text = subtitle.get("text", "").strip()
            
            if text:
                formatted_lines.append(f"[{start_time}] {text}")
        
        return '\n'.join(formatted_lines)
    
    def _split_into_messages(self, full_text: str, header: str) -> List[str]:
        """–†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if len(full_text) <= self.MAX_MESSAGE_LENGTH:
            return [full_text]
        
        messages = []
        lines = full_text.split('\n')
        header_lines = header.split('\n')
        content_lines = lines[len(header_lines):]
        
        current_message = header
        message_count = 0
        total_messages = self._estimate_message_count(content_lines)
        
        for line in content_lines:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = f"{current_message}\n{line}"
            
            if len(test_message) <= self.MAX_MESSAGE_LENGTH:
                current_message = test_message
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
                if message_count > 0:
                    part_header = f"üìÑ –ß–∞—Å—Ç—å {message_count + 1}/{total_messages}\n{'‚îÄ' * 30}"
                    current_message = current_message.replace(header, part_header)
                
                messages.append(current_message)
                message_count += 1
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                part_header = f"üìÑ –ß–∞—Å—Ç—å {message_count + 1}/{total_messages}\n{'‚îÄ' * 30}"
                current_message = f"{part_header}\n{line}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if current_message.strip():
            if message_count > 0:
                part_header = f"üìÑ –ß–∞—Å—Ç—å {message_count + 1}/{total_messages}\n{'‚îÄ' * 30}"
                current_message = current_message.replace(header, part_header)
            messages.append(current_message)
        
        return messages
    
    def _estimate_message_count(self, lines: List[str]) -> int:
        """–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        total_chars = sum(len(line) for line in lines)
        return max(1, (total_chars // self.MAX_MESSAGE_LENGTH) + 1)
    
    def _format_duration(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
        return str(timedelta(seconds=seconds))
    
    def _seconds_to_timestamp(self, seconds: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ–∫—É–Ω–¥ –≤ timestamp —Ñ–æ—Ä–º–∞—Ç MM:SS"""
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes:02d}:{secs:02d}"
    
    def format_for_file(self, subtitle_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ TXT —Ñ–∞–π–ª
        
        Args:
            subtitle_data: –î–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–∑ extract_raw_subtitles
            
        Returns:
            str: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        """
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        header = self._create_header(subtitle_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        formatted_text = self._format_subtitle_text(subtitle_data["subtitles"])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç
        full_text = f"{header}\n\n{formatted_text}"
        
        return full_text 